import React, { useState, useEffect } from 'react';
import '../styles/GameBoard.css';
import GemTile from './GemTile';

function GameBoard({ size = 5, tileSize = 100, playerId, bombCount = 3 }) {
	const totalTiles = size * size;

	const [gameOver, setGameOver] = useState(false);
	const [win, setWin] = useState(false);
	const [tiles, setTiles] = useState([]);
	const [timeLeft, setTimeLeft] = useState(210); // 3.5 –º–∏–Ω—É—Ç—ã (210 —Å–µ–∫—É–Ω–¥)
	const [loseReason, setLoseReason] = useState(''); // "bomb" | "time"

	// —Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –∫–ª–µ—Ç–æ–∫
	const initTiles = () => {
		return Array.from({ length: totalTiles }, () => ({
			type: 'empty',
			revealed: false,
		}));
	};

	// —Å—Ç–∞–≤–∏–º N –±–æ–º–± —Å–ª—É—á–∞–π–Ω–æ
	const placeBombs = (arr, count) => {
		let newTiles = [...arr];
		let bombsPlaced = 0;
		while (bombsPlaced < count) {
			const pos = Math.floor(Math.random() * totalTiles);
			if (newTiles[pos].type === 'empty') {
				newTiles[pos].type = 'bomb';
				bombsPlaced++;
			}
		}
		return newTiles;
	};

	const startNewGame = () => {
		let newTiles = initTiles();
		newTiles = placeBombs(newTiles, bombCount);
		setTiles(newTiles);
		setGameOver(false);
		setWin(false);
		setLoseReason('');
		localStorage.setItem('tiles', JSON.stringify(newTiles));
	};

	useEffect(() => {
		const savedTiles = localStorage.getItem('tiles');
		if (savedTiles) {
			setTiles(JSON.parse(savedTiles));
		} else {
			startNewGame();
		}

		const savedStartTime = localStorage.getItem('startTime');
		if (savedStartTime) {
			const elapsed = Math.floor(
				(Date.now() - parseInt(savedStartTime, 10)) / 1000
			);
			const remaining = 210 - elapsed;
			if (remaining > 0) {
				setTimeLeft(remaining);
			} else {
				handleTimeout();
			}
		}
		// eslint-disable-next-line
	}, []);

	// –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
	useEffect(() => {
		if (gameOver || win) return;

		const timer = setInterval(() => {
			setTimeLeft((prev) => {
				if (prev <= 1) {
					clearInterval(timer);
					handleTimeout();
					return 0;
				}
				return prev - 1;
			});
		}, 1000);

		return () => clearInterval(timer);
	}, [gameOver, win]);

	const handleClick = (index) => {
		if (gameOver || win || tiles[index].revealed) return;

		let newTiles = [...tiles];
		newTiles[index].revealed = true;

		if (newTiles[index].type === 'bomb') {
			newTiles = newTiles.map((t) => ({ ...t, revealed: true }));
			setTiles(newTiles);
			setGameOver(true);
			setLoseReason('bomb');
			localStorage.clear();
			setTimeout(() => {
				window.location.reload();
			}, 1500);
			return;
		}

		setTiles(newTiles);
		localStorage.setItem('tiles', JSON.stringify(newTiles));

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
		const safeTiles =
			totalTiles - newTiles.filter((t) => t.type === 'bomb').length;
		const openedSafeTiles = newTiles.filter(
			(t) => t.revealed && t.type !== 'bomb'
		).length;

		if (openedSafeTiles === safeTiles) {
			setWin(true);
		}
	};

	// —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä (MM:SS)
	const formatTime = (seconds) => {
		const m = Math.floor(seconds / 60)
			.toString()
			.padStart(2, '0');
		const s = (seconds % 60).toString().padStart(2, '0');
		return `${m}:${s}`;
	};

	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–∞ —Ç–∞–π–º–µ—Ä–∞ ‚Üí –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	const handleTimeout = () => {
		setGameOver(true);
		setLoseReason('time');
		localStorage.clear();
		setTimeout(() => {
			window.location.reload();
		}, 2000);
	};

	return (
		<div className="floating-box">
			{/* üî• –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
			<h1 className="title">Gonzales‚Äôs Hack Bot 3.0</h1>

			{/* –¢–∞–π–º–µ—Ä */}
			<div className="timer">‚è≥ {formatTime(timeLeft)}</div>

			{gameOver && (
				<div className="overlay lose">
					<div>
						{loseReason === 'bomb' && (
							<p>üí• –ë–æ–º–±–∞! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</p>
						)}
						{loseReason === 'time' && <p>‚åõ –í—Ä–µ–º—è –≤—ã—à–ª–æ!</p>}
					</div>
				</div>
			)}

			{win && (
				<div className="overlay win">
					<div>
						<p>üéâ –ü–æ–±–µ–¥–∞!</p>
						<button
							className="restart-btn"
							onClick={() => {
								startNewGame();
								setTimeLeft(210);
								localStorage.setItem(
									'startTime',
									Date.now().toString()
								);
							}}
						>
							üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞
						</button>
					</div>
				</div>
			)}

			{/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
			<div
				className="board"
				style={{
					'--grid-size': size,
					'--tile-size': `${tileSize}px`,
				}}
			>
				{tiles.map((tile, i) => (
					<GemTile
						key={i}
						tile={tile}
						// onClick={() => handleClick(i)}
					/>
				))}
			</div>

			{/* ID –∏–≥—Ä–æ–∫–∞ */}
			<div className="player-id">ID: {playerId}</div>
		</div>
	);
}

export default GameBoard;
